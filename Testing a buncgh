"""
Date: 02-04-2025
Name: Ascii squares
Authors: Dawson 
CodeQuestLink: https://lmcodequestacademy.com/api/static/problems/ascii-squares
"""

#Neccicary libraries for all solutions
import sys
import math
import string

inputs = """2
2
 _ 
# |


"""


inputs = inputs.split("\n")

#Rounding Half Up function
#Super scuffed, and probably not that good, but it gets the job done 
#also handles leading and trailing zeros
def round_half_up(value:float,decimals:int, trailing_zeros = True, l_zeros = False, l_places = 0) -> str:

    
    #negative handling
    value = float(value)#JIK
    negative = 1
    if value <= 0:
        value *= -1
        negative = -1
    
    new_value = value*10**(decimals+1)
    new_value = math.floor(new_value)/10
    

    #rounding
    if int(str(new_value)[-1]) >= 5:
        new_value = math.ceil(new_value)
    else:
        new_value = math.floor(new_value)
    new_value /= 10**decimals * negative


    #formating
    if trailing_zeros:
        new_value = str(new_value).split(".")[0] + "." + str(new_value).split(".")[1].ljust(decimals,"0")   #trailing Zeros 
    
    if l_zeros:
        new_value = str(new_value).split(".")[0].rjust(l_places,"0") + "." + str(new_value).split(".")[1]

    return new_value

#simplifies floating point math by simply getting rid of the floating points. Call this with a list of all values that will
#have floats and code things like addition or subtraction with the float_go_away value in mind
def check_numbers_for_floats(values:list) -> None:
    global float_go_away
    float_go_away = 1

    greatest_len = 0
    for i in values:
        if len(str(float(i)).split(".")[1]) > greatest_len:
            greatest_len = len(str(i).split(".")[1])   #finds the most complicated float value
    
    #At this point does it matter?
    if greatest_len >= 30:
        greatest_len = 30
    float_go_away = 10**(greatest_len)
    

    

def automatic_inputs(value = None) -> str:
    return_value = inputs[0].rstrip()
    inputs.remove(inputs[0])  #Fetches the first input and deletes it from being used further
    return return_value






cases = int(automatic_inputs())

for case in range(cases):
    
    #fetch the boxes
    lines = []
    numLines = int(automatic_inputs())
    for i in range(numLines):
        lines.append(automatic_inputs())
    
    ranges = []
    for i in lines:
        ranges.append(len(i))

    RANGE = max(ranges)
    lines.append("S")
    lines.append("S")
    lines.append("S")
    for i in range(len(lines)):
        lines[i] = lines[i].ljust(RANGE+3,"S")

    for i in lines: print(i) #TESTING PURPOSES
    
    #logic for iterating through the points
    for y,obj in enumerate(lines):

        for x in range(len(obj)):

            for test_range in range(1,RANGE):


                #top side of the square  #verified
                for test_x in range(test_range):

                    if lines[y][x + test_x*2] == "_":
                        print("this")
                        continue
                    else:
                        break

                #if it doesnt break, it will run the next test(down in this case)
                else:
                    #right side of the square           #Verified
                    for test_y in range(1,test_range+1):

                        if lines[y+test_y][x+test_x*2+1] == "|":
                            print("this2")
                            continue
                        else:
                            break
                    else:
                        #bottom side of the square
                        for test_x in range(test_range):
                            
                            if lines[y+test_y][x + test_x*2] == "_":
                                continue
                            else:
                                break
                        #left side of the square
                        else:
                            for test_y in range(test_range):
                                print(y,x)
                                if lines[y+test_y][x] == "|":
                                    
                                    continue
                                else:
                                    print("got there")
                break

                        

    

